package _codefights;

import java.util.*;
import java.util.concurrent.ConcurrentLinkedQueue;

/**
 * Created with IntelliJ IDEA.
 * User: thorick.chow@gmail.com
 * Date: 3/3/2019
 * Time: 8:00 PM
 * <p>
 * *
 * https://app.codesignal.com/arcade/graphs-arcade/in-the-pseudoforest/EywKKTcqGrfbavDrw
 * <p>
 * Not long ago you discovered a wonderful tree in the nearby woods that made you very curious about the greenery around you. You went to the nearby woods and drew various plants in your notebook. The plants in the woods have various structures: some of them even contain loops!
 * <p>
 * Anyway, for now you are interested only in trees. You came up with a brand new property: you call a tree a caterpillar if there exists a path in it, such that each vertex of a tree either belongs to this path or is connected to one of its vertices by a single edge. To find out more about them, you would like to write a program that will find all interesting trees in the structures you drew in your notebook.
 * <p>
 * The plants you drew consist of n vertices and are connected by several edges.
 * Calculate the number of regular trees and caterpillar trees in the structures you drew in your notebook.
 * <p>
 * ----------------
 * awesomead
 * <p>
 * <p>
 * Can someone maybe give me a heads up here? I can solve 8/12 tests with a single BFS (non-recursive), but for some of the later (larger) tests, I'm getting a too high number of trees and caterpillars. Are there any edge cases I need to be aware of that disqualify components from being trees/caterpillars?
 * A component is not a tree (and therefor not a caterpillar) if:
 * <p>
 * It has a cycle
 * It has vertices that connect to themselves
 * <p>
 * A tree is not a caterpillar if:
 * <p>
 * A vertex in the tree is connected to more than 2 other vertices that have a degree > 1
 * <p>
 * I think my logic is sound, but perhaps I'm missing something?
 * <p>
 * ---------------
 * <p>
 * ---------------
 * <p>
 * vlad_n2
 * <p>
 * I think your logic is correct, maybe there were some bugs in the implementation.
 * I did the following.
 * For every connected component in a graph,
 * I've checked if it has a cycle, if yes, then it's not a tree and not a caterpillar tree.
 * <p>
 * If it doesn't have a cycle, then it's a tree.
 * <p>
 * After, I check if this tree is a caterpillar tree,
 * i.e. every vertex with degree > 1 has no more than 2 adjacent vertices with degree > 1.
 * For every check above I've used recursive DFS,
 * therefore we visit each vertex at most twice:
 * 1) during is_tree check;
 * 2) during is_caterpillar check.
 * <p>
 * <p>
 * <p>
 * ------------------
 * <p>
 * <p>
 * Try:
 * consider all nodes that have connected nodes of rank 1 to be potential path nodes
 * then all path nodes can have up to 2 other path nodes as connections
 * but all other connected nodes to that node must be of rank 1.
 * <p>
 * <p>
 * <p>
 * <p>
 * <p>
 * =======================
 * OK me:     NO
 * <p>
 * check rule:
 * any node of degree > 2:  all but 2 of the connected nodes MUST be of degree 1
 * <p>
 * NO:  no strong enough   in case 1  node 2 does not meet this condition, but it is a proper path node
 * <p>
 * WAIT maybe it does.
 * node 11 is connected to 3 nodes of degree > 1   (the branch with node 20)  so this causes the
 * tree test to fail, as it should
 */
public class ArcadeGraphs23_caterpillarTrees {
  static int[] caterpillarTrees(int n, int[][] edges) {
    if (edges.length == 0) {
      return new int[]{n, n};          // no graph every node is a caterpillar tree
    }
    int treeCount = 0;
    int caterpillarTreeCount = 0;
    Map<Integer, ConcurrentLinkedQueue<Object>> edgeMap = new HashMap<Integer, ConcurrentLinkedQueue<Object>>();
    Map<Integer, Integer> nodeDegreeMap = new HashMap<Integer, Integer>();
    Set<Integer> disqualifiedNodes = new HashSet<Integer>();   // any connected nodes involving these are not trees
    Set<Integer> pathNodes = new HashSet<Integer>();   // these are the nodes that are designated as path nodes
                                                       // if we find a contradiction during processing of trees
                                                       // then that tree is not a caterpillar tree
    // for a given node key, the edge will have the key node first and the other node second
    for (int i = 0; i < edges.length; i++) {
      int[] edge = edges[i];
      if (edge[0] != edge[1]) {
        ConcurrentLinkedQueue<Object> list0 = edgeMap.get(edge[0]);
        if (list0 == null) {
          list0 = new ConcurrentLinkedQueue<Object>();
          edgeMap.put(edge[0], list0);
        }
        if (!list0.contains(edge)) {
          list0.add(edge);
        }
        ConcurrentLinkedQueue<Object> list1 = edgeMap.get(edge[1]);
        if (list1 == null) {
          list1 = new ConcurrentLinkedQueue<Object>();
          edgeMap.put(edge[1], list1);
        }
        int[] revEdge = new int[]{edge[1], edge[0]};         // key node first
        if (!list1.contains(revEdge)) {
          list1.add(revEdge);
        }
      } else {
        disqualifiedNodes.add(edge[0]);
      }
    }

    // fill in nodes with no edges
    Set<Integer> nodeSet = edgeMap.keySet();
    if (nodeSet.size() < n) {
      ConcurrentLinkedQueue<Object> empty = new ConcurrentLinkedQueue<Object>();
      for (int i = 0; i < n; i++) {
        if (!nodeSet.contains(i)) {
          edgeMap.put(i, empty);
        }
      }
      nodeSet = edgeMap.keySet();    // update with new nodes
    }
    for (Integer node : nodeSet) {
      ConcurrentLinkedQueue<Object> connectedNodes = edgeMap.get(node);
      if (connectedNodes != null) {
        nodeDegreeMap.put(node, connectedNodes.size());
      } else {
        nodeDegreeMap.put(node, 0);
      }
    }

    // tree check:  classify all connected components:  tree or not tree
    short[] color = new short[n];
    Set<Integer> connectedComponentStartNode = new HashSet<Integer>();
    Map<Integer, Set<Integer>> treesNodeMaps =
        new HashMap<Integer, Set<Integer>>();
    Set<Integer> treeStartNode = new HashSet<Integer>();
    for (Integer node : nodeSet) {
      if (disqualifiedNodes.contains(node)) {
        continue;      // no go
      }
      if (color[node] == 0) {
        connectedComponentStartNode.add(node);
        Set<Integer> treeNodes = new HashSet<Integer>();
        boolean isTree = false;
        // branchless tree check
        if (nodeDegreeMap.get(node) == 0) {
          isTree = true;
        } else {
          isTree = dfs(node, -9, edgeMap, color, treeNodes, disqualifiedNodes);
        }
        if (isTree) {
          treeCount++;
          treeStartNode.add(node);
          treesNodeMaps.put(node, treeNodes);
        }
      }
    }
    for (Integer node : treeStartNode) {
      if (disqualifiedNodes.contains(node)) {
        continue;     // no go
      }
      if (nodeDegreeMap.get(node) == 0) {
        caterpillarTreeCount++;
      } else {
        Set<Integer> treeNodes = treesNodeMaps.get(node);
        if (isCaterpillarTree(treeNodes, nodeDegreeMap, edgeMap, disqualifiedNodes, pathNodes)) {
          caterpillarTreeCount++;
        }
      }
    }
    int[] result = new int[]{treeCount, caterpillarTreeCount};
    return result;
  }

  //
  // return false if this is not part of a tree due to detected cycle
  //
  static boolean dfs(Integer node, Integer parent, Map<Integer, ConcurrentLinkedQueue<Object>> edgeMap,
                     short[] color, Set<Integer> treeNodes, Set<Integer> disqualifiedNodes) {
    if (disqualifiedNodes.contains(node)) {
      return false;              // no go
    }
    if (color[node] != 0) {
      if (color[node] == 2) {
        return true;
      }
      if (color[node] == 1) {
        // back edge creates cycle  this is not a tree
        color[node] = 2;    // we're done
        return false;
      }
    }
    color[node] = 1;
    treeNodes.add(node);
    ConcurrentLinkedQueue<Object> childEdges = edgeMap.get(node);
    for (Object obj : childEdges) {
      int[] edge = (int[]) obj;
      int childNode = edge[1];
      if (childNode == parent) {
        continue;            // this is the edge that brought us here from the parent, so we ignore it
      }
      boolean isTree = dfs(childNode, node, edgeMap, color, treeNodes, disqualifiedNodes);
      if (!isTree) {
        // cut it short we don't care about non-trees
        return false;
      }
      color[node] = 2;    // we're done with this node
    }
    return true;
  }

  static boolean isCaterpillarTree(Set<Integer> treeNodes, Map<Integer, Integer> nodeDegreeMap,
                                   Map<Integer, ConcurrentLinkedQueue<Object>> edgeMap,
                                   Set<Integer> disqualifiedNodes,
                                   Set<Integer> pathNodes) {
    //  go through every connected node in this tree
    //
    //  for any node that has more than 2 connections:
    //  2 of the nodes can be of rank > 1
    //  but they also must meet the condition that they are also connected
    //  to no more than 2 nodes that are of rank > 1.
    //
    //
    for (Integer node : treeNodes) {
      if (disqualifiedNodes.contains(node)) {
        return false;     // no go
      }
      int nodeRank = nodeDegreeMap.get(node);
      if (nodeRank == 0) {
        pathNodes.add(node);
        return true;    // standalone nodes meet the condition of caterpillar trees, degenerate anyway.
      }
      if (nodeRank == 1) {
        continue;          // safe node (and also NOT a path node)
      }

      // since node is of rank > 1  we'll make the assumption that it is a path node
      pathNodes.add(node);
      int allowedBigRankCount = 2;      // allow 2 of our connected nodes to be of rank > 1
                                        // these 2 connected nodes MUST also be path nodes
                                        // all nodes can ONLY be connected to a path node EXCEPT for connections to degree 1 nodes.
      int connectedPathNodes = 0;
      ConcurrentLinkedQueue<Object> edgeList = edgeMap.get(node);
      for (Object obj : edgeList) {
        int[] edge = (int[]) obj;
        int otherNode = edge[1];
        int otherNodeRank = nodeDegreeMap.get(otherNode);

        //  degree 1 nodes are safe and may be connected to any other node
        //  > degree 1 nodes must BE path nodes and can ONLY be connected to other > degree 1 nodes if they
        //  are also path nodes.

        if (otherNodeRank > 1) {
          boolean pass = checkConnectedCaterpillarTreeNode(otherNode, nodeDegreeMap, edgeMap, pathNodes);
          if (pass) {
            if (++connectedPathNodes > 2) {
              return false;
            }
            if (allowedBigRankCount-- <= 0) {
              return false;
            }
          } else {
            return false;      // node not qualified
          }
        }
      }
    }
    return true;
  }

  static boolean checkConnectedCaterpillarTreeNode(Integer node, Map<Integer, Integer> nodeDegreeMap,
                                                   Map<Integer, ConcurrentLinkedQueue<Object>> edgeMap,
                                                   Set<Integer> pathNodes) {
    // this node can only have be connected to 2 nodes of rank > 1.  All others are of rank 1
    if (nodeDegreeMap.get(node) <= 2) {
      return true;
    }
    int allowedBigRankCount = 2;      // allow 2 nodes to be of rank > 1
    ConcurrentLinkedQueue<Object> edgeList = edgeMap.get(node);
    for (Object obj : edgeList) {
      int[] edge = (int[]) obj;
      int otherNode = edge[1];
      int otherNodeRank = nodeDegreeMap.get(otherNode);
      if (otherNodeRank > 1) {
        if (allowedBigRankCount-- <= 0) {
          return false;
        }
      }
    }
    pathNodes.add(node);
    return true;
  }

  // true = equal
  // false = not equal
  static boolean compare(int[] a, int[] b) {

    int rowsA = a.length;
    int rowsB = b.length;
    if (rowsA != rowsB) return false;

    int colsA = a.length;
    int colsB = b.length;
    if (colsA != colsB) return false;

    for (int i = 0; i < rowsA; i++) {
      if (a[i] != b[i]) return false;
    }
    return true;
  }


  public static String printIntArrayPlain(int[] a) {
    StringBuilder sb = new StringBuilder("[");
    for (int i = 0; i < a.length; i++) {
      sb.append(a[i]);
      if (i < (a.length - 1)) {
        sb.append(", ");
      } else {
        sb.append("]");
      }
    }
    return sb.toString();
  }


  public static void main(String[] args) {
    String test = "";
    int n = 0;
    int[][] edges = null;
    int[] expected = null;
    int[] result = null;
    boolean success;

    test = "test1";
    n = 21;
    edges = new int[][]{{0, 1},
        {1, 2},
        {2, 3},
        {2, 4},
        {4, 5},
        {4, 6},
        {4, 7},
        {4, 8},
        {4, 9},
        {4, 10},
        {10, 11},
        {11, 12},
        {11, 13},
        {11, 14},
        {14, 15},
        {14, 16},
        {14, 17},
        {14, 18},
        {14, 19}};
    expected = new int[]{2, 2};

    result = caterpillarTrees(n, edges);
    success = compare(result, expected);
    System.err.println("test: " + test +
        "  " + (success == true ? "Passed" : "Failed") +
        ", result=" + printIntArrayPlain(result) + ", expected=" + printIntArrayPlain(expected));


    test = "test2";
    n = 22;
    edges = new int[][]{{0, 1},
        {1, 2},
        {2, 3},
        {2, 4},
        {4, 5},
        {4, 6},
        {4, 7},
        {4, 8},
        {4, 9},
        {4, 10},
        {10, 11},
        {11, 12},
        {11, 13},
        {11, 14},
        {14, 15},
        {14, 16},
        {14, 17},
        {14, 18},
        {14, 19},
        {13, 20}};
    expected = new int[]{2, 1};

    result = caterpillarTrees(n, edges);
    success = compare(result, expected);
    System.err.println("test: " + test +
        "  " + (success == true ? "Passed" : "Failed") +
        ", result=" + printIntArrayPlain(result) + ", expected=" + printIntArrayPlain(expected));


    test = "test3";
    n = 1;
    edges = new int[][]{};
    expected = new int[]{1, 1};
    result = caterpillarTrees(n, edges);
    success = compare(result, expected);
    System.err.println("test: " + test +
        "  " + (success == true ? "Passed" : "Failed") +
        ", result=" + printIntArrayPlain(result) + ", expected=" + printIntArrayPlain(expected));


    test = "test4";
    n = 2;
    edges = new int[][]{{0, 1},
        {1, 1}};
    expected = new int[]{0, 0};
    result = caterpillarTrees(n, edges);
    success = compare(result, expected);
    System.err.println("test: " + test +
        "  " + (success == true ? "Passed" : "Failed") +
        ", result=" + printIntArrayPlain(result) + ", expected=" + printIntArrayPlain(expected));

    
    test = "test5";
    n = 4;
    edges = new int[][]{{2, 0},
        {0, 1},
        {3, 1}};
    expected = new int[]{1, 1};
    result = caterpillarTrees(n, edges);
    success = compare(result, expected);
    System.err.println("test: " + test +
        "  " + (success == true ? "Passed" : "Failed") +
        ", result=" + printIntArrayPlain(result) + ", expected=" + printIntArrayPlain(expected));


    test = "test6";
    n = 10;
    edges = new int[][]{{0, 3},
        {0, 2},
        {3, 1},
        {3, 4},
        {3, 5},
        {3, 6},
        {7, 8}};
    expected = new int[]{3, 3};
    result = caterpillarTrees(n, edges);
    success = compare(result, expected);
    System.err.println("test: " + test +
        "  " + (success == true ? "Passed" : "Failed") +
        ", result=" + printIntArrayPlain(result) + ", expected=" + printIntArrayPlain(expected));

    test = "test11";
      n = 1000;
      edges = new int[][]{
          {119,58},
            {119,34},
            {58,139},
            {119,189},
            {34,89},
            {58,124},
            {189,179},
            {124,54},
            {124,86},
            {139,74},
            {58,218},
            {86,36},
            {58,180},
            {124,30},
            {54,156},
            {86,150},
            {36,201},
            {89,23},
            {150,2},
            {74,224},
            {139,143},
            {2,148},
            {148,46},
            {139,13},
            {124,205},
            {119,146},
            {143,181},
            {89,16},
            {89,82},
            {205,171},
            {218,126},
            {180,177},
            {89,222},
            {86,208},
            {139,57},
            {57,172},
            {181,188},
            {156,187},
            {139,63},
            {16,84},
            {13,72},
            {179,97},
            {58,116},
            {177,193},
            {72,164},
            {89,160},
            {188,88},
            {30,26},
            {160,37},
            {143,18},
            {124,131},
            {189,200},
            {57,225},
            {225,80},
            {193,227},
            {187,5},
            {84,112},
            {26,110},
            {2,75},
            {227,195},
            {195,8},
            {150,174},
            {57,22},
            {201,220},
            {164,95},
            {171,132},
            {13,197},
            {84,40},
            {13,217},
            {180,161},
            {119,127},
            {161,153},
            {112,107},
            {97,68},
            {172,21},
            {197,184},
            {139,12},
            {88,186},
            {164,4},
            {126,42},
            {72,28},
            {5,140},
            {34,206},
            {107,133},
            {89,137},
            {127,52},
            {112,209},
            {16,141},
            {34,194},
            {193,115},
            {16,190},
            {126,207},
            {190,121},
            {127,33},
            {132,108},
            {132,19},
            {132,204},
            {110,151},
            {95,85},
            {208,120},
            {194,142},
            {133,81},
            {126,155},
            {107,17},
            {153,3},
            {141,29},
            {88,149},
            {160,219},
            {172,53},
            {186,77},
            {112,214},
            {189,167},
            {151,99},
            {46,152},
            {150,59},
            {217,6},
            {52,101},
            {140,213},
            {80,178},
            {177,106},
            {46,199},
            {149,69},
            {69,211},
            {110,98},
            {19,134},
            {126,114},
            {114,62},
            {195,0},
            {98,44},
            {44,175},
            {155,223},
            {98,138},
            {153,136},
            {201,203},
            {178,91},
            {214,27},
            {72,71},
            {3,87},
            {143,118},
            {208,176},
            {29,170},
            {75,105},
            {170,232},
            {37,216},
            {54,111},
            {223,90},
            {27,70},
            {225,123},
            {214,130},
            {177,173},
            {115,92},
            {114,230},
            {188,168},
            {68,64},
            {155,43},
            {214,9},
            {54,196},
            {176,1},
            {167,47},
            {58,61},
            {80,83},
            {156,10},
            {3,135},
            {26,41},
            {58,129},
            {36,226},
            {140,228},
            {33,191},
            {12,39},
            {116,147},
            {190,35},
            {161,235},
            {6,66},
            {138,144},
            {132,221},
            {61,163},
            {84,229},
            {147,236},
            {196,14},
            {66,32},
            {131,31},
            {200,50},
            {147,94},
            {33,93},
            {230,169},
            {6,100},
            {223,55},
            {44,117},
            {138,113},
            {71,165},
            {133,182},
            {61,233},
            {80,212},
            {179,122},
            {52,73},
            {31,20},
            {36,154},
            {121,60},
            {129,49},
            {135,15},
            {12,158},
            {186,102},
            {236,51},
            {212,65},
            {191,192},
            {111,56},
            {16,24},
            {197,145},
            {224,215},
            {116,159},
            {227,96},
            {122,67},
            {94,48},
            {189,162},
            {10,78},
            {154,45},
            {167,76},
            {77,202},
            {9,231},
            {18,25},
            {84,210},
            {189,38},
            {124,183},
            {116,234},
            {173,104},
            {178,7},
            {69,166},
            {200,79},
            {203,125},
            {206,157},
            {142,103},
            {148,198},
            {86,109},
            {225,11},
            {132,128},
            {109,185},
            {578,719},
            {719,303},
            {303,604},
            {303,373},
            {303,329},
            {719,257},
            {604,390},
            {604,371},
            {373,776},
            {329,769},
            {578,589},
            {769,540},
            {303,575},
            {578,317},
            {257,380},
            {776,624},
            {624,665},
            {589,247},
            {769,251},
            {665,437},
            {437,541},
            {540,264},
            {390,766},
            {541,388},
            {317,720},
            {373,658},
            {303,718},
            {658,344},
            {589,364},
            {540,465},
            {665,785},
            {364,558},
            {658,659},
            {257,464},
            {665,791},
            {540,716},
            {317,757},
            {575,737},
            {371,676},
            {390,690},
            {785,535},
            {380,625},
            {373,762},
            {665,549},
            {769,319},
            {535,752},
            {373,411},
            {757,662},
            {690,341},
            {264,313},
            {589,559},
            {662,564},
            {578,563},
            {766,322},
            {303,386},
            {313,746},
            {319,660},
            {317,334},
            {465,689},
            {437,402},
            {535,570},
            {437,256},
            {247,562},
            {766,315},
            {766,452},
            {578,369},
            {662,600},
            {624,424},
            {465,278},
            {549,272},
            {535,470},
            {272,394},
            {659,460},
            {570,670},
            {659,288},
            {264,414},
            {437,502},
            {411,268},
            {559,318},
            {662,253},
            {364,586},
            {719,336},
            {257,544},
            {257,409},
            {716,477},
            {341,736},
            {558,738},
            {769,495},
            {541,593},
            {373,627},
            {386,601},
            {549,520},
            {257,311},
            {336,778},
            {578,744},
            {746,751},
            {751,710},
            {373,448},
            {313,572},
            {737,724},
            {251,754},
            {256,687},
            {570,630},
            {754,726},
            {757,471},
            {334,682},
            {689,498},
            {559,277},
            {564,376},
            {627,484},
            {470,688},
            {562,340},
            {535,514},
            {315,548},
            {257,599},
            {558,480},
            {625,259},
            {744,405},
            {688,395},
            {593,786},
            {570,325},
            {344,711},
            {662,773},
            {751,393},
            {465,244},
            {251,664},
            {244,614},
            {682,554},
            {502,441},
            {658,569},
            {535,608},
            {257,523},
            {303,331},
            {601,511},
            {247,668},
            {720,282},
            {414,280},
            {549,566},
            {711,299},
            {716,730},
            {601,362},
            {558,651},
            {373,445},
            {769,486},
            {373,686},
            {769,583},
            {566,531},
            {665,770},
            {627,580},
            {773,615},
            {544,382},
            {690,367},
            {322,328},
            {664,775},
            {604,238},
            {625,419},
            {535,459},
            {280,420},
            {664,492},
            {752,584},
            {244,246},
            {575,451},
            {570,403},
            {328,692},
            {730,435},
            {762,504},
            {402,269},
            {244,727},
            {572,543},
            {757,296},
            {393,398},
            {668,368},
            {334,635},
            {575,347},
            {776,743},
            {382,261},
            {686,436},
            {278,305},
            {288,301},
            {520,714},
            {682,421},
            {593,374},
            {541,745},
            {411,472},
            {334,327},
            {280,461},
            {720,248},
            {322,494},
            {770,406},
            {689,729},
            {736,487},
            {280,539},
            {535,306},
            {766,348},
            {424,571},
            {625,266},
            {608,516},
            {539,249},
            {325,631},
            {471,612},
            {269,401},
            {564,742},
            {580,728},
            {736,582},
            {615,355},
            {710,482},
            {334,500},
            {319,588},
            {238,346},
            {495,509},
            {249,618},
            {664,342},
            {402,747},
            {614,723},
            {313,590},
            {368,418},
            {464,783},
            {347,479},
            {418,628},
            {523,683},
            {471,653},
            {791,793},
            {599,794},
            {762,522},
            {348,567},
            {659,579},
            {535,290},
            {710,360},
            {745,645},
            {344,750},
            {419,577},
            {322,320},
            {398,416},
            {566,310},
            {751,404},
            {754,602},
            {382,739},
            {486,565},
            {723,252},
            {566,684},
            {277,291},
            {593,407},
            {579,302},
            {325,476},
            {313,715},
            {739,673},
            {424,438},
            {414,444},
            {730,505},
            {322,490},
            {549,383},
            {728,434},
            {465,304},
            {500,279},
            {380,312},
            {360,478},
            {562,765},
            {390,733},
            {279,475},
            {715,576},
            {624,285},
            {360,349},
            {461,721},
            {710,545},
            {601,556},
            {472,735},
            {502,759},
            {743,426},
            {318,701},
            {344,598},
            {727,703},
            {315,508},
            {549,632},
            {409,324},
            {388,297},
            {682,734},
            {257,603},
            {253,271},
            {599,617},
            {785,415},
            {682,361},
            {288,560},
            {376,661},
            {495,655},
            {409,555},
            {578,265},
            {682,666},
            {729,321},
            {566,267},
            {541,493},
            {324,667},
            {346,518},
            {719,592},
            {487,497},
            {477,488},
            {251,260},
            {673,287},
            {511,619},
            {388,550},
            {256,654},
            {522,392},
            {719,680},
            {310,790},
            {436,606},
            {495,772},
            {701,722},
            {604,620},
            {404,702},
            {716,283},
            {461,262},
            {754,356},
            {331,481},
            {401,385},
            {628,528},
            {367,530},
            {738,499},
            {371,643},
            {673,706},
            {730,634},
            {664,699},
            {445,378},
            {465,644},
            {261,300},
            {459,240},
            {356,466},
            {297,384},
            {682,323},
            {560,713},
            {278,469},
            {444,483},
            {703,443},
            {486,533},
            {535,712},
            {565,525},
            {644,717},
            {571,681},
            {688,552},
            {304,709},
            {378,796},
            {719,512},
            {769,753},
            {502,474},
            {667,352},
            {528,534},
            {393,370},
            {688,377},
            {278,700},
            {620,695},
            {533,243},
            {570,468},
            {600,542},
            {727,675},
            {470,538},
            {535,517},
            {344,250},
            {584,513},
            {736,678},
            {534,705},
            {586,389},
            {490,591},
            {665,781},
            {567,648},
            {288,462},
            {283,771},
            {534,574},
            {321,551},
            {278,281},
            {528,358},
            {771,679},
            {514,640},
            {302,422},
            {723,597},
            {539,427},
            {490,258},
            {690,429},
            {675,642},
            {601,782},
            {299,537},
            {724,585},
            {318,491},
            {420,758},
            {479,254},
            {668,447},
            {772,789},
            {249,610},
            {313,532},
            {342,354},
            {374,391},
            {534,557},
            {667,337},
            {631,693},
            {300,276},
            {786,595},
            {317,351},
            {578,433},
            {781,795},
            {722,515},
            {480,308},
            {389,307},
            {683,788},
            {717,650},
            {580,708},
            {776,698},
            {776,350},
            {789,677},
            {701,596},
            {654,568},
            {385,274},
            {682,473},
            {770,764},
            {555,768},
            {441,663},
            {266,529},
            {386,524},
            {712,455},
            {557,669},
            {579,633},
            {301,423},
            {729,607},
            {311,507},
            {540,646},
            {409,623},
            {246,332},
            {681,605},
            {634,431},
            {785,626},
            {537,450},
            {702,263},
            {575,275},
            {781,641},
            {607,647},
            {522,573},
            {422,467},
            {758,696},
            {450,242},
            {376,335},
            {385,777},
            {728,685},
            {790,547},
            {358,440},
            {350,774},
            {301,756},
            {477,629},
            {683,637},
            {300,330},
            {721,294},
            {614,239},
            {313,326},
            {239,412},
            {511,780},
            {505,375},
            {580,381},
            {675,284},
            {381,792},
            {321,652},
            {349,458},
            {367,787},
            {696,343},
            {285,779},
            {288,761},
            {274,521},
            {302,594},
            {520,749},
            {324,674},
            {628,359},
            {481,457},
            {280,546},
            {491,784},
            {349,245},
            {247,741},
            {597,408},
            {383,672},
            {782,273},
            {543,449},
            {385,298},
            {327,609},
            {787,613},
            {788,763},
            {290,338},
            {589,432},
            {405,561},
            {414,639},
            {550,379},
            {592,454},
            {573,353},
            {447,439},
            {619,333},
            {548,731},
            {683,363},
            {758,496},
            {580,413},
            {618,255},
            {765,237},
            {249,694},
            {608,357},
            {475,366},
            {543,616},
            {700,797},
            {747,657},
            {287,527},
            {735,365},
            {487,339},
            {733,611},
            {393,501},
            {782,519},
            {741,760},
            {294,621},
            {775,707},
            {635,372},
            {283,453},
            {514,503},
            {413,485},
            {452,442},
            {551,704},
            {563,697},
            {358,309},
            {491,587},
            {344,656},
            {354,286},
            {473,725},
            {763,636},
            {615,345},
            {632,536},
            {331,400},
            {719,270},
            {524,417},
            {574,489},
            {559,425},
            {288,428},
            {796,397},
            {537,649},
            {611,526},
            {409,506},
            {765,767},
            {537,396},
            {771,732},
            {529,510},
            {524,241},
            {595,292},
            {296,463},
            {634,638},
            {763,387},
            {461,456},
            {320,410},
            {381,316},
            {685,314},
            {741,295},
            {529,622},
            {264,671},
            {277,399},
            {515,740},
            {641,289},
            {756,748},
            {682,430},
            {262,446},
            {703,691},
            {455,581},
            {348,553},
            {514,293},
            {269,755},
            {819,857},
            {857,851},
            {851,830},
            {819,879},
            {851,885},
            {885,831},
            {857,835},
            {831,804},
            {804,817},
            {830,807},
            {804,872},
            {851,840},
            {830,839},
            {835,860},
            {819,864},
            {819,845},
            {885,832},
            {860,854},
            {879,823},
            {872,806},
            {864,866},
            {832,802},
            {830,871},
            {864,847},
            {885,877},
            {804,803},
            {871,868},
            {804,869},
            {817,887},
            {819,808},
            {871,800},
            {830,821},
            {830,853},
            {823,841},
            {877,880},
            {819,798},
            {819,856},
            {806,814},
            {869,848},
            {851,889},
            {807,859},
            {817,826},
            {800,858},
            {831,812},
            {819,837},
            {851,834},
            {859,815},
            {872,822},
            {877,888},
            {837,842},
            {823,801},
            {887,825},
            {885,838},
            {832,850},
            {872,810},
            {880,863},
            {845,829},
            {837,876},
            {798,849},
            {835,820},
            {831,886},
            {826,816},
            {877,809},
            {830,811},
            {817,852},
            {889,870},
            {801,833},
            {820,883},
            {887,867},
            {800,873},
            {804,884},
            {807,843},
            {838,836},
            {860,813},
            {811,874},
            {860,861},
            {859,846},
            {831,818},
            {885,875},
            {880,805},
            {883,799},
            {835,882},
            {847,827},
            {882,824},
            {847,865},
            {843,844},
            {840,855},
            {846,828},
            {840,862},
            {813,881},
            {837,878},
            {829,861},
            {799,809},
            {807,882},
            {803,869},
            {824,870},
            {803,859},
            {821,846},
            {811,859},
            {877,867},
            {857,868},
            {836,853},
            {841,845},
            {810,877},
            {802,852},
            {809,849},
            {877,858},
            {886,869},
            {884,813},
            {899,897},
            {899,898},
            {899,910},
            {898,900},
            {900,903},
            {910,912},
            {912,905},
            {912,902},
            {910,911},
            {899,891},
            {911,896},
            {899,894},
            {910,904},
            {894,908},
            {897,906},
            {906,895},
            {894,909},
            {909,892},
            {892,893},
            {897,901},
            {898,890},
            {892,907},
            {901,913},
            {901,901},
            {904,899},
            {894,898},
            {907,890},
            {900,913},
            {901,904},
            {891,892},
            {896,901},
            {903,895},
            {903,893},
            {900,899},
            {904,904},
            {894,905},
            {897,907},
            {897,904},
            {912,912},
            {906,910},
            {890,912},
            {911,905},
            {891,907},
            {892,913},
            {893,901},
            {905,892},
            {897,900},
            {913,911},
            {913,905},
            {911,906},
            {911,907},
            {912,895},
            {902,902},
            {904,909},
            {891,912},
            {905,896},
            {904,896},
            {894,903},
            {902,904},
            {904,908},
            {912,899},
            {897,892},
            {909,902},
            {910,910},
            {890,890},
            {912,893},
            {934,918},
            {918,923},
            {923,914},
            {914,922},
            {914,959},
            {922,950},
            {922,917},
            {950,921},
            {921,941},
            {918,933},
            {917,919},
            {919,954},
            {918,947},
            {922,953},
            {919,945},
            {950,924},
            {924,935},
            {941,939},
            {954,928},
            {924,956},
            {953,948},
            {914,929},
            {935,955},
            {947,957},
            {954,949},
            {934,931},
            {921,952},
            {950,937},
            {919,938},
            {931,927},
            {924,944},
            {953,932},
            {923,958},
            {950,926},
            {926,946},
            {917,925},
            {929,915},
            {915,930},
            {930,943},
            {929,942},
            {939,940},
            {924,920},
            {941,936},
            {938,916},
            {953,951},
            {960,961},
            {961,962},
            {962,964},
            {964,974},
            {974,966},
            {966,973},
            {973,975},
            {975,972},
            {972,965},
            {965,963},
            {963,970},
            {970,969},
            {969,967},
            {967,971},
            {973,968},
            {989,979},
            {979,980},
            {979,994},
            {979,985},
            {994,986},
            {989,977},
            {980,996},
            {994,995},
            {996,983},
            {995,990},
            {996,997},
            {985,981},
            {996,976},
            {989,978},
            {979,993},
            {978,987},
            {979,992},
            {979,988},
            {985,982},
            {996,991},
            {980,984}
      };
      expected = new int[]{7, 3};
      result = caterpillarTrees(n, edges);
      success = compare(result, expected);
      System.err.println("test: " + test +
          "  " + (success == true ? "Passed" : "Failed") +
          ", result=" + printIntArrayPlain(result) + ", expected=" + printIntArrayPlain(expected));
  }
}

   /*

   test 11


Output:

 {23, 11}

 Expected Output:

 {7, 3}



   test 11

 n: 1000
 edges: {{119,58},
  {119,34},
  {58,139},
  {119,189},
  {34,89},
  {58,124},
  {189,179},
  {124,54},
  {124,86},
  {139,74},
  {58,218},
  {86,36},
  {58,180},
  {124,30},
  {54,156},
  {86,150},
  {36,201},
  {89,23},
  {150,2},
  {74,224},
  {139,143},
  {2,148},
  {148,46},
  {139,13},
  {124,205},
  {119,146},
  {143,181},
  {89,16},
  {89,82},
  {205,171},
  {218,126},
  {180,177},
  {89,222},
  {86,208},
  {139,57},
  {57,172},
  {181,188},
  {156,187},
  {139,63},
  {16,84},
  {13,72},
  {179,97},
  {58,116},
  {177,193},
  {72,164},
  {89,160},
  {188,88},
  {30,26},
  {160,37},
  {143,18},
  {124,131},
  {189,200},
  {57,225},
  {225,80},
  {193,227},
  {187,5},
  {84,112},
  {26,110},
  {2,75},
  {227,195},
  {195,8},
  {150,174},
  {57,22},
  {201,220},
  {164,95},
  {171,132},
  {13,197},
  {84,40},
  {13,217},
  {180,161},
  {119,127},
  {161,153},
  {112,107},
  {97,68},
  {172,21},
  {197,184},
  {139,12},
  {88,186},
  {164,4},
  {126,42},
  {72,28},
  {5,140},
  {34,206},
  {107,133},
  {89,137},
  {127,52},
  {112,209},
  {16,141},
  {34,194},
  {193,115},
  {16,190},
  {126,207},
  {190,121},
  {127,33},
  {132,108},
  {132,19},
  {132,204},
  {110,151},
  {95,85},
  {208,120},
  {194,142},
  {133,81},
  {126,155},
  {107,17},
  {153,3},
  {141,29},
  {88,149},
  {160,219},
  {172,53},
  {186,77},
  {112,214},
  {189,167},
  {151,99},
  {46,152},
  {150,59},
  {217,6},
  {52,101},
  {140,213},
  {80,178},
  {177,106},
  {46,199},
  {149,69},
  {69,211},
  {110,98},
  {19,134},
  {126,114},
  {114,62},
  {195,0},
  {98,44},
  {44,175},
  {155,223},
  {98,138},
  {153,136},
  {201,203},
  {178,91},
  {214,27},
  {72,71},
  {3,87},
  {143,118},
  {208,176},
  {29,170},
  {75,105},
  {170,232},
  {37,216},
  {54,111},
  {223,90},
  {27,70},
  {225,123},
  {214,130},
  {177,173},
  {115,92},
  {114,230},
  {188,168},
  {68,64},
  {155,43},
  {214,9},
  {54,196},
  {176,1},
  {167,47},
  {58,61},
  {80,83},
  {156,10},
  {3,135},
  {26,41},
  {58,129},
  {36,226},
  {140,228},
  {33,191},
  {12,39},
  {116,147},
  {190,35},
  {161,235},
  {6,66},
  {138,144},
  {132,221},
  {61,163},
  {84,229},
  {147,236},
  {196,14},
  {66,32},
  {131,31},
  {200,50},
  {147,94},
  {33,93},
  {230,169},
  {6,100},
  {223,55},
  {44,117},
  {138,113},
  {71,165},
  {133,182},
  {61,233},
  {80,212},
  {179,122},
  {52,73},
  {31,20},
  {36,154},
  {121,60},
  {129,49},
  {135,15},
  {12,158},
  {186,102},
  {236,51},
  {212,65},
  {191,192},
  {111,56},
  {16,24},
  {197,145},
  {224,215},
  {116,159},
  {227,96},
  {122,67},
  {94,48},
  {189,162},
  {10,78},
  {154,45},
  {167,76},
  {77,202},
  {9,231},
  {18,25},
  {84,210},
  {189,38},
  {124,183},
  {116,234},
  {173,104},
  {178,7},
  {69,166},
  {200,79},
  {203,125},
  {206,157},
  {142,103},
  {148,198},
  {86,109},
  {225,11},
  {132,128},
  {109,185},
  {578,719},
  {719,303},
  {303,604},
  {303,373},
  {303,329},
  {719,257},
  {604,390},
  {604,371},
  {373,776},
  {329,769},
  {578,589},
  {769,540},
  {303,575},
  {578,317},
  {257,380},
  {776,624},
  {624,665},
  {589,247},
  {769,251},
  {665,437},
  {437,541},
  {540,264},
  {390,766},
  {541,388},
  {317,720},
  {373,658},
  {303,718},
  {658,344},
  {589,364},
  {540,465},
  {665,785},
  {364,558},
  {658,659},
  {257,464},
  {665,791},
  {540,716},
  {317,757},
  {575,737},
  {371,676},
  {390,690},
  {785,535},
  {380,625},
  {373,762},
  {665,549},
  {769,319},
  {535,752},
  {373,411},
  {757,662},
  {690,341},
  {264,313},
  {589,559},
  {662,564},
  {578,563},
  {766,322},
  {303,386},
  {313,746},
  {319,660},
  {317,334},
  {465,689},
  {437,402},
  {535,570},
  {437,256},
  {247,562},
  {766,315},
  {766,452},
  {578,369},
  {662,600},
  {624,424},
  {465,278},
  {549,272},
  {535,470},
  {272,394},
  {659,460},
  {570,670},
  {659,288},
  {264,414},
  {437,502},
  {411,268},
  {559,318},
  {662,253},
  {364,586},
  {719,336},
  {257,544},
  {257,409},
  {716,477},
  {341,736},
  {558,738},
  {769,495},
  {541,593},
  {373,627},
  {386,601},
  {549,520},
  {257,311},
  {336,778},
  {578,744},
  {746,751},
  {751,710},
  {373,448},
  {313,572},
  {737,724},
  {251,754},
  {256,687},
  {570,630},
  {754,726},
  {757,471},
  {334,682},
  {689,498},
  {559,277},
  {564,376},
  {627,484},
  {470,688},
  {562,340},
  {535,514},
  {315,548},
  {257,599},
  {558,480},
  {625,259},
  {744,405},
  {688,395},
  {593,786},
  {570,325},
  {344,711},
  {662,773},
  {751,393},
  {465,244},
  {251,664},
  {244,614},
  {682,554},
  {502,441},
  {658,569},
  {535,608},
  {257,523},
  {303,331},
  {601,511},
  {247,668},
  {720,282},
  {414,280},
  {549,566},
  {711,299},
  {716,730},
  {601,362},
  {558,651},
  {373,445},
  {769,486},
  {373,686},
  {769,583},
  {566,531},
  {665,770},
  {627,580},
  {773,615},
  {544,382},
  {690,367},
  {322,328},
  {664,775},
  {604,238},
  {625,419},
  {535,459},
  {280,420},
  {664,492},
  {752,584},
  {244,246},
  {575,451},
  {570,403},
  {328,692},
  {730,435},
  {762,504},
  {402,269},
  {244,727},
  {572,543},
  {757,296},
  {393,398},
  {668,368},
  {334,635},
  {575,347},
  {776,743},
  {382,261},
  {686,436},
  {278,305},
  {288,301},
  {520,714},
  {682,421},
  {593,374},
  {541,745},
  {411,472},
  {334,327},
  {280,461},
  {720,248},
  {322,494},
  {770,406},
  {689,729},
  {736,487},
  {280,539},
  {535,306},
  {766,348},
  {424,571},
  {625,266},
  {608,516},
  {539,249},
  {325,631},
  {471,612},
  {269,401},
  {564,742},
  {580,728},
  {736,582},
  {615,355},
  {710,482},
  {334,500},
  {319,588},
  {238,346},
  {495,509},
  {249,618},
  {664,342},
  {402,747},
  {614,723},
  {313,590},
  {368,418},
  {464,783},
  {347,479},
  {418,628},
  {523,683},
  {471,653},
  {791,793},
  {599,794},
  {762,522},
  {348,567},
  {659,579},
  {535,290},
  {710,360},
  {745,645},
  {344,750},
  {419,577},
  {322,320},
  {398,416},
  {566,310},
  {751,404},
  {754,602},
  {382,739},
  {486,565},
  {723,252},
  {566,684},
  {277,291},
  {593,407},
  {579,302},
  {325,476},
  {313,715},
  {739,673},
  {424,438},
  {414,444},
  {730,505},
  {322,490},
  {549,383},
  {728,434},
  {465,304},
  {500,279},
  {380,312},
  {360,478},
  {562,765},
  {390,733},
  {279,475},
  {715,576},
  {624,285},
  {360,349},
  {461,721},
  {710,545},
  {601,556},
  {472,735},
  {502,759},
  {743,426},
  {318,701},
  {344,598},
  {727,703},
  {315,508},
  {549,632},
  {409,324},
  {388,297},
  {682,734},
  {257,603},
  {253,271},
  {599,617},
  {785,415},
  {682,361},
  {288,560},
  {376,661},
  {495,655},
  {409,555},
  {578,265},
  {682,666},
  {729,321},
  {566,267},
  {541,493},
  {324,667},
  {346,518},
  {719,592},
  {487,497},
  {477,488},
  {251,260},
  {673,287},
  {511,619},
  {388,550},
  {256,654},
  {522,392},
  {719,680},
  {310,790},
  {436,606},
  {495,772},
  {701,722},
  {604,620},
  {404,702},
  {716,283},
  {461,262},
  {754,356},
  {331,481},
  {401,385},
  {628,528},
  {367,530},
  {738,499},
  {371,643},
  {673,706},
  {730,634},
  {664,699},
  {445,378},
  {465,644},
  {261,300},
  {459,240},
  {356,466},
  {297,384},
  {682,323},
  {560,713},
  {278,469},
  {444,483},
  {703,443},
  {486,533},
  {535,712},
  {565,525},
  {644,717},
  {571,681},
  {688,552},
  {304,709},
  {378,796},
  {719,512},
  {769,753},
  {502,474},
  {667,352},
  {528,534},
  {393,370},
  {688,377},
  {278,700},
  {620,695},
  {533,243},
  {570,468},
  {600,542},
  {727,675},
  {470,538},
  {535,517},
  {344,250},
  {584,513},
  {736,678},
  {534,705},
  {586,389},
  {490,591},
  {665,781},
  {567,648},
  {288,462},
  {283,771},
  {534,574},
  {321,551},
  {278,281},
  {528,358},
  {771,679},
  {514,640},
  {302,422},
  {723,597},
  {539,427},
  {490,258},
  {690,429},
  {675,642},
  {601,782},
  {299,537},
  {724,585},
  {318,491},
  {420,758},
  {479,254},
  {668,447},
  {772,789},
  {249,610},
  {313,532},
  {342,354},
  {374,391},
  {534,557},
  {667,337},
  {631,693},
  {300,276},
  {786,595},
  {317,351},
  {578,433},
  {781,795},
  {722,515},
  {480,308},
  {389,307},
  {683,788},
  {717,650},
  {580,708},
  {776,698},
  {776,350},
  {789,677},
  {701,596},
  {654,568},
  {385,274},
  {682,473},
  {770,764},
  {555,768},
  {441,663},
  {266,529},
  {386,524},
  {712,455},
  {557,669},
  {579,633},
  {301,423},
  {729,607},
  {311,507},
  {540,646},
  {409,623},
  {246,332},
  {681,605},
  {634,431},
  {785,626},
  {537,450},
  {702,263},
  {575,275},
  {781,641},
  {607,647},
  {522,573},
  {422,467},
  {758,696},
  {450,242},
  {376,335},
  {385,777},
  {728,685},
  {790,547},
  {358,440},
  {350,774},
  {301,756},
  {477,629},
  {683,637},
  {300,330},
  {721,294},
  {614,239},
  {313,326},
  {239,412},
  {511,780},
  {505,375},
  {580,381},
  {675,284},
  {381,792},
  {321,652},
  {349,458},
  {367,787},
  {696,343},
  {285,779},
  {288,761},
  {274,521},
  {302,594},
  {520,749},
  {324,674},
  {628,359},
  {481,457},
  {280,546},
  {491,784},
  {349,245},
  {247,741},
  {597,408},
  {383,672},
  {782,273},
  {543,449},
  {385,298},
  {327,609},
  {787,613},
  {788,763},
  {290,338},
  {589,432},
  {405,561},
  {414,639},
  {550,379},
  {592,454},
  {573,353},
  {447,439},
  {619,333},
  {548,731},
  {683,363},
  {758,496},
  {580,413},
  {618,255},
  {765,237},
  {249,694},
  {608,357},
  {475,366},
  {543,616},
  {700,797},
  {747,657},
  {287,527},
  {735,365},
  {487,339},
  {733,611},
  {393,501},
  {782,519},
  {741,760},
  {294,621},
  {775,707},
  {635,372},
  {283,453},
  {514,503},
  {413,485},
  {452,442},
  {551,704},
  {563,697},
  {358,309},
  {491,587},
  {344,656},
  {354,286},
  {473,725},
  {763,636},
  {615,345},
  {632,536},
  {331,400},
  {719,270},
  {524,417},
  {574,489},
  {559,425},
  {288,428},
  {796,397},
  {537,649},
  {611,526},
  {409,506},
  {765,767},
  {537,396},
  {771,732},
  {529,510},
  {524,241},
  {595,292},
  {296,463},
  {634,638},
  {763,387},
  {461,456},
  {320,410},
  {381,316},
  {685,314},
  {741,295},
  {529,622},
  {264,671},
  {277,399},
  {515,740},
  {641,289},
  {756,748},
  {682,430},
  {262,446},
  {703,691},
  {455,581},
  {348,553},
  {514,293},
  {269,755},
  {819,857},
  {857,851},
  {851,830},
  {819,879},
  {851,885},
  {885,831},
  {857,835},
  {831,804},
  {804,817},
  {830,807},
  {804,872},
  {851,840},
  {830,839},
  {835,860},
  {819,864},
  {819,845},
  {885,832},
  {860,854},
  {879,823},
  {872,806},
  {864,866},
  {832,802},
  {830,871},
  {864,847},
  {885,877},
  {804,803},
  {871,868},
  {804,869},
  {817,887},
  {819,808},
  {871,800},
  {830,821},
  {830,853},
  {823,841},
  {877,880},
  {819,798},
  {819,856},
  {806,814},
  {869,848},
  {851,889},
  {807,859},
  {817,826},
  {800,858},
  {831,812},
  {819,837},
  {851,834},
  {859,815},
  {872,822},
  {877,888},
  {837,842},
  {823,801},
  {887,825},
  {885,838},
  {832,850},
  {872,810},
  {880,863},
  {845,829},
  {837,876},
  {798,849},
  {835,820},
  {831,886},
  {826,816},
  {877,809},
  {830,811},
  {817,852},
  {889,870},
  {801,833},
  {820,883},
  {887,867},
  {800,873},
  {804,884},
  {807,843},
  {838,836},
  {860,813},
  {811,874},
  {860,861},
  {859,846},
  {831,818},
  {885,875},
  {880,805},
  {883,799},
  {835,882},
  {847,827},
  {882,824},
  {847,865},
  {843,844},
  {840,855},
  {846,828},
  {840,862},
  {813,881},
  {837,878},
  {829,861},
  {799,809},
  {807,882},
  {803,869},
  {824,870},
  {803,859},
  {821,846},
  {811,859},
  {877,867},
  {857,868},
  {836,853},
  {841,845},
  {810,877},
  {802,852},
  {809,849},
  {877,858},
  {886,869},
  {884,813},
  {899,897},
  {899,898},
  {899,910},
  {898,900},
  {900,903},
  {910,912},
  {912,905},
  {912,902},
  {910,911},
  {899,891},
  {911,896},
  {899,894},
  {910,904},
  {894,908},
  {897,906},
  {906,895},
  {894,909},
  {909,892},
  {892,893},
  {897,901},
  {898,890},
  {892,907},
  {901,913},
  {901,901},
  {904,899},
  {894,898},
  {907,890},
  {900,913},
  {901,904},
  {891,892},
  {896,901},
  {903,895},
  {903,893},
  {900,899},
  {904,904},
  {894,905},
  {897,907},
  {897,904},
  {912,912},
  {906,910},
  {890,912},
  {911,905},
  {891,907},
  {892,913},
  {893,901},
  {905,892},
  {897,900},
  {913,911},
  {913,905},
  {911,906},
  {911,907},
  {912,895},
  {902,902},
  {904,909},
  {891,912},
  {905,896},
  {904,896},
  {894,903},
  {902,904},
  {904,908},
  {912,899},
  {897,892},
  {909,902},
  {910,910},
  {890,890},
  {912,893},
  {934,918},
  {918,923},
  {923,914},
  {914,922},
  {914,959},
  {922,950},
  {922,917},
  {950,921},
  {921,941},
  {918,933},
  {917,919},
  {919,954},
  {918,947},
  {922,953},
  {919,945},
  {950,924},
  {924,935},
  {941,939},
  {954,928},
  {924,956},
  {953,948},
  {914,929},
  {935,955},
  {947,957},
  {954,949},
  {934,931},
  {921,952},
  {950,937},
  {919,938},
  {931,927},
  {924,944},
  {953,932},
  {923,958},
  {950,926},
  {926,946},
  {917,925},
  {929,915},
  {915,930},
  {930,943},
  {929,942},
  {939,940},
  {924,920},
  {941,936},
  {938,916},
  {953,951},
  {960,961},
  {961,962},
  {962,964},
  {964,974},
  {974,966},
  {966,973},
  {973,975},
  {975,972},
  {972,965},
  {965,963},
  {963,970},
  {970,969},
  {969,967},
  {967,971},
  {973,968},
  {989,979},
  {979,980},
  {979,994},
  {979,985},
  {994,986},
  {989,977},
  {980,996},
  {994,995},
  {996,983},
  {995,990},
  {996,997},
  {985,981},
  {996,976},
  {989,978},
  {979,993},
  {978,987},
  {979,992},
  {979,988},
  {985,982},
  {996,991},
  {980,984}}

 Output:

 {23, 11}

 Expected Output:

 {7, 3}



    The test case is too large and is shown truncated
    Input:

    n: 100000
    edges: [[5962,890],
     [890,7669],
     [890,10852],
     [10852,8115],
     [8115,5716],
     [8115,8251],
     [10852,2914], 

    */

